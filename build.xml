<?xml version="1.0"?>
<project name="docbook-src" default="all">
  <description>
     This Ant build.xml file is used build sanewall.tar.gz releases
  </description>

  <property name="build.dir" value="build"/>
  <property name="tmp.dir" value="${build.dir}/tmp"/>
  <property name="dist.dir" value="dist"/>

  <property name="docbook.xsl.dir" value="doc/docbook/docbook-xsl" />
  <property name="docbook.jar.dir" value="doc/docbook/lib" />
  <property name="docbook.xsl.htm" value="${docbook.xsl.dir}/html/docbook.xsl"/>
  <property name="docbook.xsl.fop" value="pdf.xsl"/>
  <property name="docbook.xsl.man" value="${docbook.xsl.dir}/manpages/docbook.xsl"/>
  <property name="docbook.titlexsl.fop" value="${docbook.xsl.dir}/template/titlepage.xsl"/>
  <property name="docbook.input.dir" value="doc" />
  <property name="pdf.papertype" value="A4" />

  <path id="xslt.class.path">
    <fileset dir="${docbook.jar.dir}">
      <include name="*.jar"/>
    </fileset>
  </path>

  <target name="all" depends="version,dist"/>

  <target name="version" description="Extract top version from ChangeLog">
    <exec outputproperty="sanewall.version"
          executable="sed">
      <arg value="-ne"/>
      <arg value="1s/.*(\(.*\)).*/\1/p"/>
      <arg value="ChangeLog"/>
    </exec>
    <property name="target.dir"
             value="${build.dir}/sanewall-${sanewall.version}"/>
    <echo message="Sanewall version: ${sanewall.version}"/>
    <echo message="Build directory: ${target.dir}"/>
  </target>

  <target name="clean">
    <delete dir="${build.dir}"/>
    <delete dir="${dist.dir}"/>
    <delete file="doc/services-list.xml"/>
    <delete file="doc/manual-info.xml"/>
  </target>

  <target name="dist" depends="contents">
    <mkdir dir="${dist.dir}"/>
    <exec executable="tar">
      <arg value="zcpCf"/>
      <arg value="${build.dir}"/>
      <arg value="${dist.dir}/sanewall-${sanewall.version}.tar.gz"/>
      <arg value="sanewall-${sanewall.version}"/>
      <arg value="--owner=root"/>
      <arg value="--group=root"/>
    </exec>
    <echo message="Output: ${dist.dir}/sanewall-${sanewall.version}.tar.gz"/>
  </target>

  <target name="tree" depends="version">
    <mkdir dir="${build.dir}"/>
    <chmod dir="${build.dir}" perm="755"/>

    <mkdir dir="${target.dir}"/>
    <chmod dir="${target.dir}" perm="755"/>

    <mkdir dir="${target.dir}/admin"/>
    <chmod dir="${target.dir}/admin" perm="755"/>

    <mkdir dir="${target.dir}/doc"/>
    <chmod dir="${target.dir}/doc" perm="755"/>

    <mkdir dir="${target.dir}/examples"/>
    <chmod dir="${target.dir}/examples" perm="755"/>

    <mkdir dir="${target.dir}/init.d"/>
    <chmod dir="${target.dir}/init.d" perm="755"/>

    <mkdir dir="${target.dir}/man"/>
    <chmod dir="${target.dir}/man" perm="755"/>

    <mkdir dir="${target.dir}/man/man1"/>
    <chmod dir="${target.dir}/man/man1" perm="755"/>

    <mkdir dir="${target.dir}/man/man5"/>
    <chmod dir="${target.dir}/man/man5" perm="755"/>
  </target>

  <target name="contents" depends="doc">
    <copy todir="${target.dir}" file="sanewall"/>
    <exec executable="sed" failonerror="true"> <!-- fixup version -->
      <arg value="-e"/>
      <arg value="s;VERSION=DEVELOPMENT;VERSION=${sanewall.version};"/>
      <arg value="-i"/>
      <arg value="${target.dir}/sanewall"/>
    </exec>
    <chmod file="${target.dir}/sanewall" perm="755"/>

    <copy todir="${target.dir}" file="README"/>
    <chmod file="${target.dir}/README" perm="644"/>
    <copy todir="${target.dir}" file="INSTALL"/>
    <chmod file="${target.dir}/INSTALL" perm="644"/>
    <copy todir="${target.dir}" file="COPYING"/>
    <chmod file="${target.dir}/COPYING" perm="644"/>

    <gzip destfile="${target.dir}/ChangeLog.gz" src="ChangeLog"/>
    <chmod file="${target.dir}/ChangeLog.gz" perm="644"/>

    <copy todir="${target.dir}/admin">
      <fileset dir="admin">
         <include name="*.sh"/>
      </fileset>
    </copy>
    <chmod  dir="${target.dir}/admin" includes="**/*.sh" perm="755"/>

    <copy todir="${target.dir}/init.d">
      <fileset dir="init.d">
         <include name="sanewall.*"/>
      </fileset>
    </copy>
    <chmod  dir="${target.dir}/init.d" includes="**/sanewall.*" perm="755"/>

    <copy todir="${target.dir}/examples">
      <fileset dir="examples">
         <include name="*.conf"/>
      </fileset>
    </copy>
    <chmod  dir="${target.dir}/examples" includes="**/*.conf" perm="644"/>
  </target>

  <target name="service-list" unless="${noserviceupdate}">
    <echo message="Building services-list.xml from services-db.txt"/>
    <exec executable="./mkservicelist.pl" failonerror="true">
      <arg file="doc/services-list.xml"/>
      <arg file="sanewall"/>
      <arg file="doc/services-db.txt"/>
    </exec>
  </target>
  <target name="manual-info" unless="${noinfoupdate}">
    <exec executable="./mkbookinfo.pl" failonerror="true">
      <arg file="doc/manual-info.xml"/>
      <arg value="${sanewall.version}"/>
      <arg file="doc/manual-info.txt"/>
    </exec>
  </target>

  <target name="valid-doc" depends="docbook-deps">
    <uptodate    srcfile="doc/services-db.txt"
              targetfile="doc/services-list.xml"
                property="noserviceupdate"/>
    <antcall target="service-list"/>
    <uptodate    srcfile="doc/manual-info.txt"
              targetfile="doc/manual-info.xml"
                property="noinfoupdate"/>
    <antcall target="manual-info"/>
    <exec executable="./val-docbook.sh" failonerror="true">
      <arg file="doc/sanewall-manual.xml"/>
    </exec>
  </target>

  <target name="xslt-set-rebuild" unless="xsltuptodate">
    <property name="xsltneedrebuild" value="true"/>
  </target>

  <target name="xslt-set-norebuild" if="xsltuptodate">
    <property name="xsltneedrebuild" value="false"/>
  </target>

  <target name="xslt-need-rebuild">
    <uptodate targetfile="${tmp.dir}/sanewall-manual.fo"
                property="xsltuptodate">
      <srcfiles dir="${docbook.input.dir}" includes="**/*.xml"/>
    </uptodate>
  </target>

  <target name="doc" depends="valid-doc,tree,xslt-need-rebuild,xslt-set-rebuild,xslt-set-norebuild,xslt-titlepage,pdf,man,html">
  </target>

  <target name="man">
    <echo message="XML includes newer than built files: ${xsltneedrebuild}"/>
    <mkdir dir="${tmp.dir}"/>
    <xslt style="${docbook.xsl.man}"
        basedir="${docbook.input.dir}"
        destdir="${tmp.dir}"
          force="${xsltneedrebuild}"
      extension=".mantmp">
      <include name="**/*manual.xml" />
      <include name="**/*article.xml" />
      <param name="man.output.in.separate.dir" expression="1"/>
      <param name="man.output.subdirs.enabled" expression="1"/>
      <classpath refid="xslt.class.path" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                 value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
    </xslt>
    <apply executable="sed" failonerror="true"> <!-- fixup soelim values -->
      <arg value="-e"/>
      <arg value="s;.so man/man;.so man;"/>
      <arg value="-i"/>
      <fileset dir="${tmp.dir}/man"/>
    </apply>
    <copy todir="${target.dir}/man">
      <fileset dir="${tmp.dir}/man">
         <exclude name="**/*.mantmp"/>
      </fileset>
    </copy>
    <chmod  dir="${target.dir}/man" includes="**/*.*" perm="644"/>
  </target>

  <target name="pdf">
    <echo message="XML includes newer than built files: ${xsltneedrebuild}"/>
    <xslt
        basedir="${docbook.input.dir}"
        destdir="${tmp.dir}"
          force="${xsltneedrebuild}"
      extension=".fo">
      <style>
        <file file="doc/pdf.xsl"/>
      </style>
      <include name="**/*manual.xml" />
      <include name="**/*article.xml" />
      <classpath refid="xslt.class.path" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                 value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
      <param name="paper.type" expression="${pdf.papertype}"/>
    </xslt>

    <taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
      <classpath>
        <fileset dir="${docbook.jar.dir}">
          <include name="*.jar"/>
        </fileset>
      </classpath>
    </taskdef>
    <fop outdir="${target.dir}/doc"
         outfile="sanewall-manual.pdf" fofile="${tmp.dir}/sanewall-manual.fo">
    </fop>
    <chmod  dir="${target.dir}/doc" includes="**/*.*" perm="644"/>
  </target>

  <target name="html">
    <echo message="XML includes newer than built files: ${xsltneedrebuild}"/>
    <xslt style="${docbook.xsl.htm}"
        basedir="${docbook.input.dir}"
        destdir="${target.dir}/doc"
          force="${xsltneedrebuild}"
      extension=".html">
      <include name="**/*manual.xml" />
      <include name="**/*article.xml" />
      <param name="html.stylesheet.type" expression="text/css" />
      <param name="html.stylesheet" expression="sanewall-manual.css" />
      <classpath refid="xslt.class.path" />
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
                 value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
      <param name="generate.index" expression="0"/>
    </xslt>
    <copy todir="${target.dir}/doc">
      <fileset dir="doc">
        <include name="*.css" />
      </fileset>
    </copy>
    <exec executable="./mkhtmlindex.pl" failonerror="true">
      <arg file="${target.dir}/doc/sanewall-services.html"/>
      <arg file="sanewall"/>
    </exec>
    <chmod  dir="${target.dir}/doc" includes="**/*.*" perm="644"/>
  </target>

  <target name="xslt-titlepage">
    <exec executable="xsltproc" failonerror="true">
      <arg value="--stringparam"/>
      <arg value="ns"/>
      <arg value="http://www.w3.org/1999/XSL/Format"/>
      <arg value="--output"/>
      <arg file="doc/titlepage-fo.xsl"/>
      <arg file="doc/docbook/docbook-xsl/template/titlepage.xsl"/>
      <arg file="doc/titlepage-fo.xml"/>
    </exec>
  </target>

  <target name="-check-docbook-deps">
    <available property="docbook.exists" file="doc/docbook/complete"/>
  </target>

  <target name="docbook-deps" unless="docbook.exists"
       depends="-check-docbook-deps">
    <input message="Download docbook files?"
         validargs="y,n"
       addproperty="yesorno"/>
      <condition property="abort">
        <equals arg1="n" arg2="${yesorno}"/>
      </condition>
    <fail if="abort">Unable to build docs without docbook dependencies.</fail>
    <exec executable="./get-docbook.sh"/>
  </target>


</project>
