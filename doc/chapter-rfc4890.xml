<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
                 "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<!-- For license information see sanewall-manual-info.xml.in -->
<chapter><title>RFC 4890 Recommendations</title>
  <section><title>Introduction</title>
    <para>
      <ulink url="http://tools.ietf.org/html/rfc4890">RFC 4890</ulink>
      is entitled "Recommendations for Filtering ICMPv6 Messages in Firewalls".
    </para>

    <para>
      The recommendations pertain to firewalling at router level, not
      necessarily hosts or bridges (which may need to treat some packets
      differently, e.g. NS/NA and RS/RA).
    </para>

    <para>
      The sections below were extracted from the example implementation;
      each one describes how the recommendation can be achieved with
      <application>Sanewall</application>.
    </para>

    <para>
      It is assumed that a policy of <action>reject</action> or
      <action>deny</action> is in place. If that is not the case then
      some packet types need dropping explicitly to meet the
      recommendations.
    </para>
  </section>

  <section><title>Allow outbound echo requests from prefixes which belong to the site</title>
    <para>
       The <action>router</action> command (see <xref linkend="def-router"/>)
       should be used with an appropriate <action>src</action> rule parameter
       (see <xref linkend="rule-params"/>).
    </para>
  </section>

  <section><title>Allow inbound echo requests towards only predetermined hosts</title>
    <para>
       The <xref linkend="service-ping"/> should be used in combination
       with an appropriate <action>dst</action> rule parameter
       (see <xref linkend="rule-params"/>).
    </para>
  </section>

  <section><title>Allow incoming and outgoing echo reply messages only for existing sessions</title>
    <para>
       This is handled automatically by the <xref linkend="service-ping"/>.
    </para>
  </section>

  <section><title>Deny icmps to/from link local addresses</title>
    <para>
       The <action>router</action> command (see <xref linkend="def-router"/>)
       should be used with an appropriate <action>src</action>
       and <action>dst</action> rule parameter
       (see <xref linkend="rule-params"/>). For example:
<programlisting>src not "${UNROUTABLE_IPS}" dst not "${UNROUTABLE_IPS}"
</programlisting>
    </para>
  </section>

  <section><title>Drop echo replies which have a multicast address as a destination</title>
    <para>
       The <xref linkend="service-ping"/> can be used with an
       appropriate <action>src</action> rule parameter
       (see <xref linkend="rule-params"/>). For example:
<programlisting>ipv6 route ping src not "${MULTICAST6_IPS}"
</programlisting>
       will prevent incoming echo-requests from multicast IPs and replies
       to them.
    </para>
  </section>

  <section id="rfc4890-dest-unreach"><title>Allow incoming destination unreachable messages only for existing sessions</title>
    <para>
       Ensure any routers have:
<programlisting>server ipv6error accept</programlisting>

       Adding dst "$inner_prefix" ensures only public hosts receive
       the messages. See <xref linkend="service-ipv6error"/>.
    </para>
  </section>

  <section><title>Allow outgoing destination unreachable messages</title>
    <para>
      The rule(s) suggested by <xref linkend="rfc4890-dest-unreach"/>
      will also meet this recommendation.
    </para>
  </section>

  <section><title>Allow incoming Packet Too Big messages only for existing sessions</title>
    <para>
      The rule(s) suggested by <xref linkend="rfc4890-dest-unreach"/>
      will also meet this recommendation.
    </para>
  </section>

  <section><title>Allow outgoing Packet Too Big messages</title>
    <para>
      The rule(s) suggested by <xref linkend="rfc4890-dest-unreach"/>
      will also meet this recommendation.
    </para>
  </section>

  <section><title>Allow incoming time exceeded code 0 messages only for existing sessions</title>
    <para>
      The rule(s) suggested by <xref linkend="rfc4890-dest-unreach"/>
      will also meet this recommendation.
    </para>
  </section>

  <section><title>Allow incoming time exceeded code 1 messages</title>
    <para>
      The rule(s) suggested by <xref linkend="rfc4890-dest-unreach"/>
      will also meet this recommendation.
    </para>

    <note>
     <para>
       Note: in the example RFC script, non-established/related messages are
       allowed through for this type.
     </para>

     <para>
       It is not clear why since code 0 and not code 1 messages are listed as
       part of the establishment of communications. Code 1 messages are listed
       as less essential for propagation over the network.
     </para>

     <para>
       The behaviour implemented here is as per destination unreachable
       messages, so the same as the incoming time exceeded code 0 messages
       example.
     </para>
    </note>
  </section>

  <section><title>Allow outgoing time exceeded code 0 messages</title>
    <para>
      The rule(s) suggested by <xref linkend="rfc4890-dest-unreach"/>
      will also meet this recommendation.
    </para>
  </section>

  <section><title>Allow outgoing time exceeded code 1 messages</title>
    <para>
      The rule(s) suggested by <xref linkend="rfc4890-dest-unreach"/>
      will also meet this recommendation.
    </para>
  </section>

  <section><title>Allow incoming parameter problem code 1 and 2 messages for an existing session</title>
    <para>
      The rule(s) suggested by <xref linkend="rfc4890-dest-unreach"/>
      will also meet this recommendation.
    </para>
  </section>

  <section><title>Allow outgoing parameter problem code 1 and code 2 messages</title>
    <para>
      The rule(s) suggested by <xref linkend="rfc4890-dest-unreach"/>
      will also meet this recommendation.
    </para>
  </section>

  <section><title>Allow incoming and outgoing parameter problem code 0 messages</title>
    <para>
      From the RFC it is not really necessary to allow these messages.
      <application>Sanewall</application> handles this automatically
      (by dropping them) unless you set up an explicit route for the
      packets using the icmpv6 type bad-header.
    </para>
  </section>

  <section><title>Drop NS/NA messages both incoming and outgoing</title>
    <para>
      <application>Sanewall</application> handles this automatically unless
      you set up an explicit route for the packets.
    </para>
    <note><para>
        Hosts and bridges need to allow these messages.
        See <xref linkend="service-ipv6neigh"/>.
    </para></note>
  </section>

  <section><title>Drop RS/RA messages both incoming and outgoing</title>
    <para>
      <application>Sanewall</application> handles this automatically unless
      you set up an explicit route for the packets.
    </para>
    <note><para>
        Hosts and bridges need to allow these messages.
        See <xref linkend="service-ipv6router"/>.
    </para></note>
  </section>

  <section><title>Drop Redirect messages both incoming and outgoing</title>
    <para>
      <application>Sanewall</application> handles this automatically unless
      you set up an explicit route for the packets.
    </para>
    <note><para>
      At some point <application>Sanewall</application> may have a helper
      command added to simplify allowing these messages on a host/bridge.
      Meantime this is an example of the relevant ip6tables command:
<programlisting>ip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type redirect -j DROP
</programlisting>
    </para></note>
  </section>

  <section><title>Drop incoming and outgoing Multicast Listener queries (MLDv1 and MLDv2)</title>
    <para>
      <application>Sanewall</application> handles this automatically unless
      you set up an explicit route for the packets.
    </para>

    <note><para>
      At some point <application>Sanewall</application> may have a helper
      command added to simplify allowing these messages on a host/bridge.
      Meantime this is an example of the relevant ip6tables command:
<programlisting>ip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 130 -j DROP
</programlisting>
    </para></note>
  </section>

  <section><title>Drop incoming and outgoing Multicast Listener reports (MLDv1)</title>
    <para>
      <application>Sanewall</application> handles this automatically
      unless you set up an explicit route for the packets.
    </para>

    <note><para>
      At some point <application>Sanewall</application> may have a helper
      command added to simplify allowing these messages on a host/bridge.
      Meantime this is an example of the relevant ip6tables command:
<programlisting>ip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 131 -j DROP
</programlisting>
    </para></note>
  </section>

  <section><title>Drop incoming and outgoing Multicast Listener Done messages (MLDv1)</title>
    <para>
       <application>Sanewall</application> handles this automatically
       unless you set up an explicit route for the packets.
    </para>

    <note><para>
      At some point <application>Sanewall</application> may have a helper
      command added to simplify allowing these messages on a host/bridge.
      Meantime this is an example of the relevant ip6tables command:
<programlisting>ip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 132 -j DROP
</programlisting>
    </para></note>
  </section>

  <section><title>Drop incoming and outgoing Multicast Listener reports (MLDv2)</title>
    <para>
       <application>Sanewall</application> handles this automatically
       unless you set up an explicit route for the packets.
    </para>

    <note><para>
      At some point <application>Sanewall</application> may have a helper
      command added to simplify allowing these messages on a host/bridge.
      Meantime this is an example of the relevant ip6tables command:
<programlisting>ip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 143 -j DROP
</programlisting>
    </para></note>
  </section>

  <section><title>Drop router renumbering messages</title>
    <para>
       <application>Sanewall</application> handles this automatically
       unless you set up an explicit route for the packets.
    </para>

    <note><para>
      At some point <application>Sanewall</application> may have a helper
      command added to simplify allowing these messages on a host/bridge.
      Meantime this is an example of the relevant ip6tables command:
<programlisting>ip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 138 -j DROP
</programlisting>
    </para></note>
  </section>

  <section><title>Drop node information queries (139) and replies (140)</title>
    <para>
      <application>Sanewall</application> handles this automatically
      unless you set up an explicit route for the packets.

    <note><para>
      At some point <application>Sanewall</application> may have a helper
      command added to simplify allowing these messages on a host/bridge.
      Meantime this is an example of the relevant ip6tables command:
<programlisting>ip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 139 -j DROP
ip6tables -A icmpv6-filter -p icmpv6 --icmpv6-type 140 -j DROP
</programlisting>
    </para></note>
    </para>
  </section>

  <section><title>If there are mobile ipv6 home agents present on the trusted side allow</title>
    <para>
      At some point <application>Sanewall</application> may have a helper
      command added to simplify this setup. Meantime this is an example of
      the relevant ip6tables commands from the RFC script:
<programlisting>#incoming Home Agent address discovery request
ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \
     --icmpv6-type 144 -j ACCEPT
#outgoing Home Agent address discovery reply
ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \
     --icmpv6-type 145 -j ACCEPT
#incoming Mobile prefix solicitation
ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \
     --icmpv6-type 146 -j ACCEPT
#outgoing Mobile prefix advertisement
ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \
     --icmpv6-type 147 -j ACCEPT
</programlisting>
<!--
       The approriate "todo" complex rule
       with <action>src</action><action>dst</action> rule parameter
       (see <xref linkend="rule-params"/>) ensures only
       valid $inner_prefix values work.
  -->
    </para>
  </section>

  <section><title>If there are roaming mobile nodes present on the trusted side allow</title>
    <para>
      At some point <application>Sanewall</application> may have a helper
      command added to simplify this setup. Meantime this is an example of
      the relevant ip6tables commands from the RFC script:
<programlisting>#outgoing Home Agent address discovery request
ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \
     --icmpv6-type 144 -j ACCEPT
#incoming Home Agent address discovery reply
ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \
     --icmpv6-type 145 -j ACCEPT
#outgoing Mobile prefix solicitation
ip6tables -A icmpv6-filter -p icmpv6 -s $inner_prefix \
     --icmpv6-type 146 -j ACCEPT
#incoming Mobile prefix advertisement
ip6tables -A icmpv6-filter -p icmpv6 -d $inner_prefix \
     --icmpv6-type 147 -j ACCEPT
</programlisting>
<!--
       The approriate "todo" complex rule with
       <action>src</action><action>dst</action> rule parameter
       (see <xref linkend="rule-params"/>) ensures only
       valid $inner_prefix values work.
-->
    </para>
  </section>

  <section><title>Drop everything else</title>
    <para>
      <application>Sanewall</application> handles this automatically
      unless you set up an explicit route for the packets.
    </para>
  </section>
</chapter>
